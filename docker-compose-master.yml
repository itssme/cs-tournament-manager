version: '3'
services:
  db:
    image: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    env_file:
      - postgres.env
    volumes:
      - ./db:/var/lib/postgresql/data
  pgbackups:
    image: prodrigestivill/postgres-backup-local
    restart: always
    user: postgres:postgres # Optional: see below
    volumes:
      - /var/opt/pgbackups:/backups
    links:
      - db
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
      - SCHEDULE=@every 0h15m00s
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080
    env_file:
      - postgres.env
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - 8080:8080
  redis:
    image: redis:7-alpine
    restart: unless-stopped
  csgo_manager:
    depends_on:
      - db
      - redis
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./teams.json:/app/teams.json
      - ./gslt.json:/app/gslt.json
      - ./demofiles:/demofiles
      - ./backupfiles:/backupfiles
    ports:
      - 80:80
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - MAX_WORKERS=1 # TODO: fix the loading of the sql schema and then scale this correctly again
    env_file:
      - ./master.env
  telegram_bot:
    depends_on:
      - csgo_manager
    build:
      context: telegram_bot
      dockerfile: Dockerfile
    env_file:
      - telegram_bot/.env
